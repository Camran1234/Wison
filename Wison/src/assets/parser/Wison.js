/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/

var SymbolTable = require('./symbolTable').default
  let re = new SymbolTable()
var Wison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[1,15],$V3=[2,11],$V4=[1,14],$V5=[1,19],$V6=[1,18],$V7=[2,9],$V8=[2,24],$V9=[2,23],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[9,39,43],$Vh=[2,36],$Vi=[1,37],$Vj=[1,38],$Vk=[2,12],$Vl=[2,9,18],$Vm=[2,24,25,26,28,29,30,31,32,33],$Vn=[2,27],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[2,24,26,29],$Vs=[1,75],$Vt=[2,42],$Vu=[1,76],$Vv=[2,9,39,43],$Vw=[24,50],$Vx=[2,51],$Vy=[1,108],$Vz=[1,109],$VA=[2,48],$VB=[1,115],$VC=[19,24,42,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"WISON":4,"¿":5,"p":6,"LEX":7,"{":8,":":9,"t":10,"y":11,"SYNTAX":12,"sy":13,"er":14,"}":15,"var_re":16,"var":17,"TERMINALINIT":18,"TERMINAL":19,"<":20,"-":21,"expresion_re":22,"expresion":23,";":24,"(":25,")":26,"fer":27,"[":28,"]":29,"ALLNUMBERS":30,"ALLLETTERS":31,"RESERVED_WORD":32,"ALFANUM":33,"*":34,"+":35,"?":36,"not_re":37,"ini":38,"EOF":39,"not":40,"NOTERMINALINIT":41,"NOTERMINAL":42,"INIT":43,"vars_re":44,"vars":45,"=":46,"ef":47,"proc":48,"ef_re":49,"|":50,"proc_re":51,"n":52,"$accept":0,"$end":1},
terminals_: {2:"error",4:"WISON",5:"¿",7:"LEX",8:"{",9:":",12:"SYNTAX",15:"}",18:"TERMINALINIT",19:"TERMINAL",20:"<",21:"-",24:";",25:"(",26:")",28:"[",29:"]",30:"ALLNUMBERS",31:"ALLLETTERS",32:"RESERVED_WORD",33:"ALFANUM",34:"*",35:"+",36:"?",39:"EOF",41:"NOTERMINALINIT",42:"NOTERMINAL",43:"INIT",46:"=",50:"|"},
productions_: [0,[3,3],[3,2],[6,5],[6,3],[11,5],[11,2],[10,3],[10,2],[14,1],[16,2],[16,0],[17,5],[17,2],[22,2],[22,2],[23,5],[23,5],[23,4],[23,3],[23,3],[23,2],[23,2],[23,0],[27,1],[27,1],[27,1],[27,0],[13,8],[13,5],[13,6],[13,8],[13,7],[13,6],[13,2],[37,2],[37,0],[37,3],[40,3],[38,4],[38,2],[44,2],[44,0],[44,2],[45,5],[45,2],[47,2],[49,3],[49,0],[48,1],[51,2],[51,0],[52,1],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("s"+this._$.first_line + " columna: "+ this._$.first_column); 
break;
case 2:
re.addErrorSintactico("Error Sintactico, se esperaba la forma WISON ¿ ..., en "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 3:
 console.log("p"); 
break;
case 4:
re.addErrorSintactico("Error Sintactico, se esperaba la forma Lex { : ..., en "+$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 5:
 console.log("y"); 
break;
case 6:
re.addErrorSintactico("Error Sintactico, se esperaba la forma Syntax { { : ..., en "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 7:
 console.log("t"); 
break;
case 8:
re.addErrorSintactico("Error Sintactico, se esperaba la forma : } ..., en "+$$[$0],this._$.last_line,this._$.last_column);
break;
case 9:
 console.log("er"); 
break;
case 10:
 console.log("var_re"); 
break;
case 12:
 console.log("var"); re.addTokenTerminal($$[$0-3]); re.addLexemeTerminal($$[$0]); re.resetTerminal(); 
break;
case 13:
re.addErrorSintactico("Error Sintactico, se esperaba la forma Terminal $_Terminal <- .... en "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 14:
 console.log("expresion_re");
break;
case 15:
re.addErrorSintactico("Error Sintactico, se esperaba la forma 'REGULAR EXPRESION' ; ... en "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 16:
 console.log("1expresion"); this.$ = [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]].join(' '); 
break;
case 17:
 console.log("2expresion"); this.$ = [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]].join(' '); 
break;
case 18:
 console.log("3expresion"); this.$ = [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]].join(' '); 
break;
case 19:
 console.log("4expresion"); this.$ = [$$[$0-2],$$[$0-1],$$[$0]].join(' ');
break;
case 20:
 console.log("5expresion"); this.$ = [$$[$0-2],$$[$0-1],$$[$0]].join(' ');
break;
case 21:
 console.log("6expresion"); this.$ = [$$[$0-1],$$[$0]].join(' '); 
break;
case 22:
 console.log("7expresion"); this.$ = [$$[$0-1],$$[$0]].join(' '); 
break;
case 24: case 25: case 26:
this.$=$$[$0];
break;
case 28:
 console.log("sy"); 
break;
case 29:
re.addErrorSintactico("Error Sintactico, se esperaba la forma agregar  }} ? WISON en "+[$$[$0-2]].join(" "),this._$.last_line,this._$.last_column);
break;
case 30:
re.addErrorSintactico("Error Sintactico, se esperaba la forma agregar :}} ? WISON en "+[$$[$0-3],$$[$0-2]].join(" "),this._$.last_line,this._$.last_column);
break;
case 31:
re.addErrorSintactico("Error Sintactico, se esperaba la forma agregar ? WISON en "+[$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]].join(" "),this._$.last_line,this._$.last_column);
break;
case 32:
re.addErrorSintactico("Error Sintactico, se esperaba la forma agregar ? WISON en "+[$$[$0-4],$$[$0-3],$$[$0-2]].join(" "),this._$.last_line,this._$.last_column);
break;
case 33:
re.addErrorSintactico("Error Sintactico, ERROR FATAL NO SE DECLARO Initial_Sim... cerca de: ",this._$.first_line,this._$.first_column);
break;
case 34:
re.addErrorSintactico("Error Sintactico, se esperaba la forma :}} ? WISON en "+$$[$0-1],this._$.last_line,this._$.last_column);
break;
case 35:
 console.log("not_re"); 
break;
case 37:
re.addErrorSintactico("Error Sintactico, se esperaba la forma No_Terminal %_NoTerminal ;... cerca de  "+$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 38:
 console.log("not"); re.addNoTerminalDeclarate($$[$0-1]); 
break;
case 39:
 console.log("ini");re.tokenInitialiaze($$[$0-2]); 
break;
case 40:
re.addErrorSintactico("Error Sintactico, se esperaba la forma INIT NOTERMINAL ';' ... cerca de  "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 41:
 console.log("vars_re"); 
break;
case 43: case 45:
re.addErrorSintactico("Error Sintactico, se esperaba la forma NOTERMINAL '<' '='... cerca de  "+$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 44:
 console.log("vars"); re.addProductionName($$[$0-4]); re.resetNoTerminal(); 
break;
case 46:
 console.log("ef"+$$[$0-1]+$$[$0]); re.addNewRule([$$[$0-1],$$[$0]].join(" "));
break;
case 47:
 console.log("ef_re"+$$[$0-1]); re.addNewRule($$[$0-1]);
break;
case 49:
 console.log("proc"); this.$=$$[$0]
break;
case 50:
 console.log("proc_re"); this.$=[$$[$0-1],$$[$0]].join(" "); 
break;
case 52: case 53:
 console.log("n"); this.$=$$[$0];
break;
}
},
table: [{2:[1,3],3:1,4:[1,2]},{1:[3]},{5:[1,4]},{2:$V0,6:5,7:$V1},{2:$V0,6:8,7:$V1},{1:[2,2]},{8:[1,9]},{2:$V2,9:$V3,10:10,14:11,16:12,17:13,18:$V4},{1:[2,1]},{9:[1,16]},{2:$V5,11:17,12:$V6},{2:[1,21],9:[1,20]},o($V7,$V7),{2:$V2,9:$V3,16:22,17:13,18:$V4},{19:[1,23]},o($V8,$V9,{22:24,23:25,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),{2:$V2,9:$V3,10:32,14:11,16:12,17:13,18:$V4},{1:[2,4]},{8:[1,33]},o($Vg,$Vh,{13:34,37:35,40:36,2:$Vi,41:$Vj}),{15:[1,39]},o($Vk,[2,8]),o($V7,[2,10]),{20:[1,40]},o($Vl,[2,13]),{2:[1,42],24:[1,41]},{19:[1,44],23:43,25:$Va,26:$V9,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf},{23:45,25:$Va,28:$Vb,29:$V9,30:$Vc,31:$Vd,32:$Ve,33:$Vf},o($Vm,$Vn,{27:46,34:$Vo,35:$Vp,36:$Vq}),o($Vm,$Vn,{27:50,34:$Vo,35:$Vp,36:$Vq}),o($Vr,$V9,{23:51,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vr,$V9,{23:52,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),{2:$V5,11:53,12:$V6},{8:[1,54]},{1:[2,6]},{2:[1,59],9:[1,56],38:55,39:[1,57],43:[1,58]},o($Vg,$Vh,{40:36,37:60,2:$Vi,41:$Vj}),{40:61,41:$Vj},{42:[1,62]},o($Vk,[2,7]),{21:[1,63]},o($Vl,[2,14]),o($Vl,[2,15]),{26:[1,64]},{26:[1,65]},{29:[1,66]},o($Vr,$V9,{23:67,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vm,$V8),o($Vm,[2,25]),o($Vm,[2,26]),o($Vr,$V9,{23:68,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vr,[2,21]),o($Vr,[2,22]),{1:[2,3]},{9:[1,69]},{9:[1,70]},{15:[1,71]},{1:[2,34]},{42:[1,72]},{2:$Vs,9:$Vt,42:$Vu,44:73,45:74},o($Vv,[2,35]),o($Vg,$Vh,{40:36,37:77,2:$Vi,41:$Vj}),{24:[1,78]},o($V8,$V9,{23:25,22:79,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vm,$Vn,{27:80,34:$Vo,35:$Vp,36:$Vq}),o($Vr,$V9,{23:81,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vm,$Vn,{27:82,34:$Vo,35:$Vp,36:$Vq}),o($Vr,[2,19]),o($Vr,[2,20]),o($Vg,$Vh,{37:35,40:36,13:83,2:$Vi,41:$Vj}),{2:[1,85],15:[1,84]},{15:[1,86]},{24:[1,87]},{9:[2,40]},{2:$Vs,9:$Vt,42:$Vu,44:88,45:74},{2:$Vs,9:$Vt,42:$Vu,44:89,45:90},{20:[1,91]},o($Vv,[2,37]),o([2,9,39,41,43],[2,38]),o($Vl,$Vk),o($Vr,$V9,{23:92,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),o($Vr,[2,18]),o($Vr,$V9,{23:93,25:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf}),{1:[2,5]},{2:[1,95],15:[1,94]},{39:[1,96]},{2:[1,97]},{2:$Vs,9:$Vt,42:$Vu,44:98,45:74},{9:[2,41]},{9:[2,43]},{2:$Vs,9:[2,45],42:$Vu,44:88,45:74},{46:[1,99]},o($Vr,[2,16]),o($Vr,[2,17]),{2:[1,101],36:[1,100]},{39:[1,102]},{1:[2,29]},{39:[1,103]},{9:[2,39]},o($Vw,$Vx,{47:104,48:105,51:106,52:107,19:$Vy,42:$Vz}),{2:[1,111],4:[1,110]},{39:[1,112]},{1:[2,30]},{1:[2,33]},{24:[1,113]},{24:$VA,49:114,50:$VB},o($Vw,[2,49]),o($Vw,$Vx,{52:107,51:116,19:$Vy,42:$Vz}),o($VC,[2,52]),o($VC,[2,53]),{39:[1,117]},{39:[1,118]},{1:[2,32]},o([2,9,42],[2,44]),{24:[2,46]},o($Vw,$Vx,{51:106,52:107,48:119,19:$Vy,42:$Vz}),o($Vw,[2,50]),{1:[2,28]},{1:[2,31]},{24:$VA,49:120,50:$VB},{24:[2,47]}],
defaultActions: {5:[2,2],8:[2,1],17:[2,4],34:[2,6],53:[2,3],57:[2,34],73:[2,40],83:[2,5],88:[2,41],89:[2,43],96:[2,29],98:[2,39],102:[2,30],103:[2,33],112:[2,32],114:[2,46],117:[2,28],118:[2,31],120:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},returnTable: function returnTable(){
    return re
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  console.log("Hero goes the extra code");  
 
  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return ''+'SYNTAX'
break;
case 2:return ''+'INIT'
break;
case 3:return ''+'NOTERMINALINIT'
break;
case 4:/*Ignore */
break;
case 5:/*Ignore */
break;
case 6:return ''+'ALLLETTERS' 
break;
case 7:return ''+'ALLNUMBERS'
break;
case 8:return ''+'{'
break;
case 9:return ''+'}'
break;
case 10:return ''+'['
break;
case 11:return ''+']'
break;
case 12:return ''+'('
break;
case 13:return ''+')'
break;
case 14:return ''+'<'
break;
case 15:return ''+'='
break;
case 16:return ''+'-'
break;
case 17:return ''+';'
break;
case 18:return ''+':'
break;
case 19:return ''+'+'
break;
case 20:return ''+'*'
break;
case 21:return ''+'?'
break;
case 22:return ''+'|'
break;
case 23:return 32
break;
case 24:return 4
break;
case 25:return 7
break;
case 26:return 5
break;
case 27:return 18
break;
case 28:return 19
break;
case 29:return 42
break;
case 30:return 39
break;
case 31: 
console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
re.addErrorLexico("Error Lexico: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)
break;
}
},
rules: [/^(?:\s+)/,/^(?:Syntax\b)/,/^(?:Initial_Sim\b)/,/^(?:No_Terminal\b)/,/^(?:#.*)/,/^(?:["/"]["*"][^*]*[*]+([^/*][^*]*["*"]+)*["/"])/,/^(?:\[aA-zZ\])/,/^(?:\[0-9\])/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:=)/,/^(?:-)/,/^(?:;)/,/^(?::)/,/^(?:\+)/,/^(?:\*)/,/^(?:\?)/,/^(?:\|)/,/^(?:['][^'\\]+['])/,/^(?:Wison\b)/,/^(?:Lex\b)/,/^(?:¿)/,/^(?:Terminal\b)/,/^(?:\$_[^ )\s;<-]+)/,/^(?:%_[^ )\s;<-]+)/,/^(?:$)/,/^(?:[^ \s]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Wison;
exports.Parser = Wison.Parser;
exports.parse = function () { return Wison.parse.apply(Wison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}